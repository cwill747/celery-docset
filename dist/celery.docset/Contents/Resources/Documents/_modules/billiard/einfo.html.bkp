<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>billiard.einfo &mdash; Celery 3.1.23 documentation</title>
    
    <link rel="stylesheet" href="../../_static/celery.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../',
        VERSION:     '3.1.23',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../_static/jquery.js"></script>
    <script type="text/javascript" src="../../_static/underscore.js"></script>
    <script type="text/javascript" src="../../_static/doctools.js"></script>
    <link rel="copyright" title="Copyright" href="../../copyright.html" />
    <link rel="top" title="Celery 3.1.23 documentation" href="../../index.html" />
    <link rel="up" title="Module code" href="../index.html" /> 
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="../../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="nav-item nav-item-0"><a href="../../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="../index.html" accesskey="U">Module code</a> &raquo;</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
<div class="deck">

    
        <p>
        This document describes the current stable version of Celery (3.1). For development docs,
        <a href="http://docs.celeryproject.org/en/master/_modules/billiard/einfo.html">go here</a>.
        </p>
    

</div>
    <h1>Source code for billiard.einfo</h1><div class="highlight"><pre>
<span></span><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">absolute_import</span>

<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">traceback</span>

<span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;ExceptionInfo&#39;</span><span class="p">,</span> <span class="s1">&#39;Traceback&#39;</span><span class="p">]</span>

<span class="n">DEFAULT_MAX_FRAMES</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">getrecursionlimit</span><span class="p">()</span> <span class="o">//</span> <span class="mi">8</span>


<span class="k">class</span> <span class="nc">_Code</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_filename</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">co_filename</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_name</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">co_name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_argcount</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">co_argcount</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_cellvars</span> <span class="o">=</span> <span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_firstlineno</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">co_firstlineno</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_flags</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">co_flags</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_freevars</span> <span class="o">=</span> <span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_code</span> <span class="o">=</span> <span class="n">b</span><span class="s1">&#39;&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_lnotab</span> <span class="o">=</span> <span class="n">b</span><span class="s1">&#39;&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_names</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">co_names</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_nlocals</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">co_nlocals</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_stacksize</span> <span class="o">=</span> <span class="n">code</span><span class="o">.</span><span class="n">co_stacksize</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">co_varnames</span> <span class="o">=</span> <span class="p">()</span>


<span class="k">class</span> <span class="nc">_Frame</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">Code</span> <span class="o">=</span> <span class="n">_Code</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_builtins</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_globals</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s2">&quot;__file__&quot;</span><span class="p">:</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_globals</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;__file__&quot;</span><span class="p">,</span> <span class="s2">&quot;__main__&quot;</span><span class="p">),</span>
            <span class="s2">&quot;__name__&quot;</span><span class="p">:</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_globals</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;__name__&quot;</span><span class="p">),</span>
            <span class="s2">&quot;__loader__&quot;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_locals</span> <span class="o">=</span> <span class="n">fl</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fl</span><span class="p">[</span><span class="s2">&quot;__traceback_hide__&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_locals</span><span class="p">[</span><span class="s2">&quot;__traceback_hide__&quot;</span><span class="p">]</span>
        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_trace</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_exc_traceback</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_exc_type</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_exc_value</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_code</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Code</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">f_code</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_lineno</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_lineno</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_lasti</span> <span class="o">=</span> <span class="n">frame</span><span class="o">.</span><span class="n">f_lasti</span>
        <span class="c1"># don&#39;t want to hit https://bugs.python.org/issue21967</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">f_restricted</span> <span class="o">=</span> <span class="bp">False</span>


<span class="k">class</span> <span class="nc">_Object</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
        <span class="p">[</span><span class="nb">setattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">kw</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>


<span class="k">class</span> <span class="nc">_Truncated</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tb_lineno</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tb_frame</span> <span class="o">=</span> <span class="n">_Object</span><span class="p">(</span>
            <span class="n">f_globals</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;__file__&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
                       <span class="s2">&quot;__name__&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
                       <span class="s2">&quot;__loader__&quot;</span><span class="p">:</span> <span class="bp">None</span><span class="p">},</span>
            <span class="n">f_fileno</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
            <span class="n">f_code</span><span class="o">=</span><span class="n">_Object</span><span class="p">(</span><span class="n">co_filename</span><span class="o">=</span><span class="s2">&quot;...&quot;</span><span class="p">,</span>
                           <span class="n">co_name</span><span class="o">=</span><span class="s2">&quot;[rest of traceback truncated]&quot;</span><span class="p">),</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tb_next</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tb_lasti</span> <span class="o">=</span> <span class="mi">0</span>


<span class="k">class</span> <span class="nc">Traceback</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="n">Frame</span> <span class="o">=</span> <span class="n">_Frame</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tb</span><span class="p">,</span> <span class="n">max_frames</span><span class="o">=</span><span class="n">DEFAULT_MAX_FRAMES</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tb_frame</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Frame</span><span class="p">(</span><span class="n">tb</span><span class="o">.</span><span class="n">tb_frame</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tb_lineno</span> <span class="o">=</span> <span class="n">tb</span><span class="o">.</span><span class="n">tb_lineno</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tb_lasti</span> <span class="o">=</span> <span class="n">tb</span><span class="o">.</span><span class="n">tb_lasti</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">tb_next</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">tb</span><span class="o">.</span><span class="n">tb_next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">depth</span> <span class="o">&lt;=</span> <span class="n">max_frames</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">tb_next</span> <span class="o">=</span> <span class="n">Traceback</span><span class="p">(</span><span class="n">tb</span><span class="o">.</span><span class="n">tb_next</span><span class="p">,</span> <span class="n">max_frames</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">tb_next</span> <span class="o">=</span> <span class="n">_Truncated</span><span class="p">()</span>


<div class="viewcode-block" id="ExceptionInfo"><a class="viewcode-back" href="../../internals/reference/celery.datastructures.html#celery.datastructures.ExceptionInfo">[docs]</a><span class="k">class</span> <span class="nc">ExceptionInfo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Exception wrapping an exception and its traceback.</span>

<span class="sd">    :param exc_info: The exception info tuple as returned by</span>
<span class="sd">        :func:`sys.exc_info`.</span>

<span class="sd">    &quot;&quot;&quot;</span>

    <span class="c1">#: Exception type.</span>
    <span class="nb">type</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1">#: Exception instance.</span>
    <span class="n">exception</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1">#: Pickleable traceback instance for use with :mod:`traceback`</span>
    <span class="n">tb</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1">#: String representation of the traceback.</span>
    <span class="n">traceback</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1">#: Set to true if this is an internal error.</span>
    <span class="n">internal</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_info</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">internal</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">exception</span><span class="p">,</span> <span class="n">tb</span> <span class="o">=</span> <span class="n">exc_info</span> <span class="ow">or</span> <span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">tb</span> <span class="o">=</span> <span class="n">Traceback</span><span class="p">(</span><span class="n">tb</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">traceback</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>
                <span class="n">traceback</span><span class="o">.</span><span class="n">format_exception</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">exception</span><span class="p">,</span> <span class="n">tb</span><span class="p">),</span>
            <span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">internal</span> <span class="o">=</span> <span class="n">internal</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">del</span><span class="p">(</span><span class="n">tb</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">traceback</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s2">&quot;&lt;ExceptionInfo: </span><span class="si">%r</span><span class="s2">&gt;&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">exception</span><span class="p">,</span> <span class="p">)</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">exc_info</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">exception</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">tb</span></div>
</pre></div>

          </div>
        </div>
      </div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="../../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="nav-item nav-item-0"><a href="../../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="../index.html" >Module code</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &copy; <a href="../../copyright.html">Copyright</a> 2009-2015, Ask Solem &amp; Contributors.
    </div>
  </body>
</html>
