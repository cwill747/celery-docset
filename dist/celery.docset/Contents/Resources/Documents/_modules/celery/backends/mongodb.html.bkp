<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>celery.backends.mongodb &mdash; Celery 3.1.23 documentation</title>
    
    <link rel="stylesheet" href="../../../_static/celery.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../../',
        VERSION:     '3.1.23',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../../_static/jquery.js"></script>
    <script type="text/javascript" src="../../../_static/underscore.js"></script>
    <script type="text/javascript" src="../../../_static/doctools.js"></script>
    <link rel="copyright" title="Copyright" href="../../../copyright.html" />
    <link rel="top" title="Celery 3.1.23 documentation" href="../../../index.html" />
    <link rel="up" title="celery.backends" href="../backends.html" /> 
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="nav-item nav-item-0"><a href="../../../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="../../index.html" >Module code</a> &raquo;</li>
          <li class="nav-item nav-item-2"><a href="../backends.html" accesskey="U">celery.backends</a> &raquo;</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
<div class="deck">

    
        <p>
        This document describes the current stable version of Celery (3.1). For development docs,
        <a href="http://docs.celeryproject.org/en/master/_modules/celery/backends/mongodb.html">go here</a>.
        </p>
    

</div>
    <h1>Source code for celery.backends.mongodb</h1><div class="highlight"><pre>
<span></span><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    celery.backends.mongodb</span>
<span class="sd">    ~~~~~~~~~~~~~~~~~~~~~~~</span>

<span class="sd">    MongoDB result store backend.</span>

<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">absolute_import</span>

<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="kn">from</span> <span class="nn">kombu.syn</span> <span class="kn">import</span> <span class="n">detect_environment</span>
<span class="kn">from</span> <span class="nn">kombu.utils</span> <span class="kn">import</span> <span class="n">cached_property</span>
<span class="kn">from</span> <span class="nn">kombu.utils.url</span> <span class="kn">import</span> <span class="n">maybe_sanitize_url</span>

<span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">states</span>
<span class="kn">from</span> <span class="nn">celery.exceptions</span> <span class="kn">import</span> <span class="n">ImproperlyConfigured</span>
<span class="kn">from</span> <span class="nn">celery.five</span> <span class="kn">import</span> <span class="n">items</span><span class="p">,</span> <span class="n">string_t</span>
<span class="kn">from</span> <span class="nn">celery.utils.timeutils</span> <span class="kn">import</span> <span class="n">maybe_timedelta</span>

<span class="kn">from</span> <span class="nn">.base</span> <span class="kn">import</span> <span class="n">BaseBackend</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="nn">pymongo</span>
<span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>  <span class="c1"># pragma: no cover</span>
    <span class="n">pymongo</span> <span class="o">=</span> <span class="bp">None</span>   <span class="c1"># noqa</span>

<span class="k">if</span> <span class="n">pymongo</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="kn">from</span> <span class="nn">bson.binary</span> <span class="kn">import</span> <span class="n">Binary</span>
    <span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>                     <span class="c1"># pragma: no cover</span>
        <span class="kn">from</span> <span class="nn">pymongo.binary</span> <span class="kn">import</span> <span class="n">Binary</span>   <span class="c1"># noqa</span>
<span class="k">else</span><span class="p">:</span>                                       <span class="c1"># pragma: no cover</span>
    <span class="n">Binary</span> <span class="o">=</span> <span class="bp">None</span>                           <span class="c1"># noqa</span>

<span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;MongoBackend&#39;</span><span class="p">]</span>


<div class="viewcode-block" id="MongoBackend"><a class="viewcode-back" href="../../../internals/reference/celery.backends.mongodb.html#celery.backends.mongodb.MongoBackend">[docs]</a><span class="k">class</span> <span class="nc">MongoBackend</span><span class="p">(</span><span class="n">BaseBackend</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;MongoDB result backend.</span>

<span class="sd">    :raises celery.exceptions.ImproperlyConfigured: if</span>
<span class="sd">        module :mod:`pymongo` is not available.</span>

<span class="sd">    &quot;&quot;&quot;</span>

    <span class="n">host</span> <span class="o">=</span> <span class="s1">&#39;localhost&#39;</span>
    <span class="n">port</span> <span class="o">=</span> <span class="mi">27017</span>
    <span class="n">user</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">password</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">database_name</span> <span class="o">=</span> <span class="s1">&#39;celery&#39;</span>
    <span class="n">taskmeta_collection</span> <span class="o">=</span> <span class="s1">&#39;celery_taskmeta&#39;</span>
    <span class="n">max_pool_size</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">options</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="n">supports_autoexpire</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="n">_connection</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">app</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">MongoBackend</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">expires</span> <span class="o">=</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;expires&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">maybe_timedelta</span><span class="p">(</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">CELERY_TASK_RESULT_EXPIRES</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">pymongo</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">ImproperlyConfigured</span><span class="p">(</span>
                <span class="s1">&#39;You need to install the pymongo library to use the &#39;</span>
                <span class="s1">&#39;MongoDB backend.&#39;</span><span class="p">)</span>

        <span class="n">config</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;CELERY_MONGODB_BACKEND_SETTINGS&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">config</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="k">raise</span> <span class="n">ImproperlyConfigured</span><span class="p">(</span>
                    <span class="s1">&#39;MongoDB backend settings should be grouped in a dict&#39;</span><span class="p">)</span>
            <span class="n">config</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>  <span class="c1"># do not modify original</span>

            <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;host&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">host</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">port</span><span class="p">))</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">user</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">database_name</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;database&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">database_name</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">taskmeta_collection</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span>
                <span class="s1">&#39;taskmeta_collection&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">taskmeta_collection</span><span class="p">,</span>
            <span class="p">)</span>

            <span class="bp">self</span><span class="o">.</span><span class="n">options</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="o">**</span><span class="n">config</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s1">&#39;options&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>

            <span class="c1"># Set option defaults</span>
            <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">items</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_prepare_client_options</span><span class="p">()):</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">options</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="p">:</span>
            <span class="c1"># Specifying backend as an URL</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">host</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span>

    <span class="k">def</span> <span class="nf">_prepare_client_options</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">pymongo</span><span class="o">.</span><span class="n">version_tuple</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">):</span>
                <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;maxPoolSize&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">max_pool_size</span><span class="p">}</span>
            <span class="k">else</span><span class="p">:</span>  <span class="c1"># pragma: no cover</span>
                <span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="s1">&#39;max_pool_size&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">max_pool_size</span><span class="p">,</span>
                    <span class="s1">&#39;auto_start_request&#39;</span><span class="p">:</span> <span class="bp">False</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="n">detect_environment</span><span class="p">()</span> <span class="o">!=</span> <span class="s1">&#39;default&#39;</span><span class="p">:</span>
                    <span class="n">options</span><span class="p">[</span><span class="s1">&#39;use_greenlets&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">return</span> <span class="n">options</span>

    <span class="k">def</span> <span class="nf">_get_connection</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Connect to the MongoDB server.&quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_connection</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="kn">from</span> <span class="nn">pymongo</span> <span class="kn">import</span> <span class="n">MongoClient</span>

            <span class="c1"># The first pymongo.Connection() argument (host) can be</span>
            <span class="c1"># a list of [&#39;host:port&#39;] elements or a mongodb connection</span>
            <span class="c1"># URI. If this is the case, don&#39;t use self.port</span>
            <span class="c1"># but let pymongo get the port(s) from the URI instead.</span>
            <span class="c1"># This enables the use of replica sets and sharding.</span>
            <span class="c1"># See pymongo.Connection() for more info.</span>
            <span class="n">url</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">host</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">string_t</span><span class="p">)</span> \
                    <span class="ow">and</span> <span class="ow">not</span> <span class="n">url</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;mongodb://&#39;</span><span class="p">):</span>
                <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;mongodb://{0}:{1}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">url</span> <span class="o">==</span> <span class="s1">&#39;mongodb://&#39;</span><span class="p">:</span>
                <span class="n">url</span> <span class="o">=</span> <span class="n">url</span> <span class="o">+</span> <span class="s1">&#39;localhost&#39;</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_connection</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="o">**</span><span class="bp">self</span><span class="o">.</span><span class="n">options</span><span class="p">)</span>

        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_connection</span>

<div class="viewcode-block" id="MongoBackend.process_cleanup"><a class="viewcode-back" href="../../../internals/reference/celery.backends.mongodb.html#celery.backends.mongodb.MongoBackend.process_cleanup">[docs]</a>    <span class="k">def</span> <span class="nf">process_cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_connection</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># MongoDB connection will be closed automatically when object</span>
            <span class="c1"># goes out of scope</span>
            <span class="k">del</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="p">)</span>
            <span class="k">del</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">database</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_connection</span> <span class="o">=</span> <span class="bp">None</span></div>

    <span class="k">def</span> <span class="nf">_store_result</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_id</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">status</span><span class="p">,</span>
                      <span class="n">traceback</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">request</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Store return value and status of an executed task.&quot;&quot;&quot;</span>
        <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="n">task_id</span><span class="p">,</span>
                <span class="s1">&#39;status&#39;</span><span class="p">:</span> <span class="n">status</span><span class="p">,</span>
                <span class="s1">&#39;result&#39;</span><span class="p">:</span> <span class="n">Binary</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">result</span><span class="p">)),</span>
                <span class="s1">&#39;date_done&#39;</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">(),</span>
                <span class="s1">&#39;traceback&#39;</span><span class="p">:</span> <span class="n">Binary</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">traceback</span><span class="p">)),</span>
                <span class="s1">&#39;children&#39;</span><span class="p">:</span> <span class="n">Binary</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">current_task_children</span><span class="p">(</span><span class="n">request</span><span class="p">),</span>
                <span class="p">))}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">meta</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">result</span>

    <span class="k">def</span> <span class="nf">_get_task_meta_for</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_id</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Get task metadata for a task by id.&quot;&quot;&quot;</span>

        <span class="n">obj</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">find_one</span><span class="p">({</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="n">task_id</span><span class="p">})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">obj</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="s1">&#39;status&#39;</span><span class="p">:</span> <span class="n">states</span><span class="o">.</span><span class="n">PENDING</span><span class="p">,</span> <span class="s1">&#39;result&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>

        <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s1">&#39;task_id&#39;</span><span class="p">:</span> <span class="n">obj</span><span class="p">[</span><span class="s1">&#39;_id&#39;</span><span class="p">],</span>
            <span class="s1">&#39;status&#39;</span><span class="p">:</span> <span class="n">obj</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">],</span>
            <span class="s1">&#39;result&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">obj</span><span class="p">[</span><span class="s1">&#39;result&#39;</span><span class="p">]),</span>
            <span class="s1">&#39;date_done&#39;</span><span class="p">:</span> <span class="n">obj</span><span class="p">[</span><span class="s1">&#39;date_done&#39;</span><span class="p">],</span>
            <span class="s1">&#39;traceback&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">obj</span><span class="p">[</span><span class="s1">&#39;traceback&#39;</span><span class="p">]),</span>
            <span class="s1">&#39;children&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">obj</span><span class="p">[</span><span class="s1">&#39;children&#39;</span><span class="p">]),</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">meta</span>

    <span class="k">def</span> <span class="nf">_save_group</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">group_id</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Save the group result.&quot;&quot;&quot;</span>
        <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="n">group_id</span><span class="p">,</span>
                <span class="s1">&#39;result&#39;</span><span class="p">:</span> <span class="n">Binary</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">result</span><span class="p">)),</span>
                <span class="s1">&#39;date_done&#39;</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">meta</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">result</span>

    <span class="k">def</span> <span class="nf">_restore_group</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">group_id</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Get the result for a group by id.&quot;&quot;&quot;</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">find_one</span><span class="p">({</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="n">group_id</span><span class="p">})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">obj</span><span class="p">:</span>
            <span class="k">return</span>

        <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s1">&#39;task_id&#39;</span><span class="p">:</span> <span class="n">obj</span><span class="p">[</span><span class="s1">&#39;_id&#39;</span><span class="p">],</span>
            <span class="s1">&#39;result&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">obj</span><span class="p">[</span><span class="s1">&#39;result&#39;</span><span class="p">]),</span>
            <span class="s1">&#39;date_done&#39;</span><span class="p">:</span> <span class="n">obj</span><span class="p">[</span><span class="s1">&#39;date_done&#39;</span><span class="p">],</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">meta</span>

    <span class="k">def</span> <span class="nf">_delete_group</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">group_id</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Delete a group by id.&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">remove</span><span class="p">({</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="n">group_id</span><span class="p">})</span>

    <span class="k">def</span> <span class="nf">_forget</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task_id</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Remove result from MongoDB.</span>

<span class="sd">        :raises celery.exceptions.OperationsError:</span>
<span class="sd">            if the task_id could not be removed.</span>

<span class="sd">        &quot;&quot;&quot;</span>
        <span class="c1"># By using safe=True, this will wait until it receives a response from</span>
        <span class="c1"># the server.  Likewise, it will raise an OperationsError if the</span>
        <span class="c1"># response was unable to be completed.</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">remove</span><span class="p">({</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="n">task_id</span><span class="p">})</span>

<div class="viewcode-block" id="MongoBackend.cleanup"><a class="viewcode-back" href="../../../internals/reference/celery.backends.mongodb.html#celery.backends.mongodb.MongoBackend.cleanup">[docs]</a>    <span class="k">def</span> <span class="nf">cleanup</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Delete expired metadata.&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span>
            <span class="p">{</span><span class="s1">&#39;date_done&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s1">&#39;$lt&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">expires</span><span class="p">}},</span>
        <span class="p">)</span></div>

    <span class="k">def</span> <span class="nf">__reduce__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(),</span> <span class="n">kwargs</span><span class="o">=</span><span class="p">{}):</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">MongoBackend</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__reduce__</span><span class="p">(</span>
            <span class="n">args</span><span class="p">,</span> <span class="nb">dict</span><span class="p">(</span><span class="n">kwargs</span><span class="p">,</span> <span class="n">expires</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">expires</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="p">),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">_get_database</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">conn</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_connection</span><span class="p">()</span>
        <span class="n">db</span> <span class="o">=</span> <span class="n">conn</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">database_name</span><span class="p">]</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">user</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">db</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">user</span><span class="p">,</span>
                                   <span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">):</span>
                <span class="k">raise</span> <span class="n">ImproperlyConfigured</span><span class="p">(</span>
                    <span class="s1">&#39;Invalid MongoDB username or password.&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">db</span>

    <span class="nd">@cached_property</span>
<div class="viewcode-block" id="MongoBackend.database"><a class="viewcode-back" href="../../../internals/reference/celery.backends.mongodb.html#celery.backends.mongodb.MongoBackend.database">[docs]</a>    <span class="k">def</span> <span class="nf">database</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Get database from MongoDB connection and perform authentication</span>
<span class="sd">        if necessary.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_get_database</span><span class="p">()</span></div>

    <span class="nd">@cached_property</span>
<div class="viewcode-block" id="MongoBackend.collection"><a class="viewcode-back" href="../../../internals/reference/celery.backends.mongodb.html#celery.backends.mongodb.MongoBackend.collection">[docs]</a>    <span class="k">def</span> <span class="nf">collection</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Get the metadata task collection.&quot;&quot;&quot;</span>
        <span class="n">collection</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">database</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">taskmeta_collection</span><span class="p">]</span>

        <span class="c1"># Ensure an index on date_done is there, if not process the index</span>
        <span class="c1"># in the background. Once completed cleanup will be much faster</span>
        <span class="n">collection</span><span class="o">.</span><span class="n">ensure_index</span><span class="p">(</span><span class="s1">&#39;date_done&#39;</span><span class="p">,</span> <span class="n">background</span><span class="o">=</span><span class="s1">&#39;true&#39;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">collection</span></div>

<div class="viewcode-block" id="MongoBackend.as_uri"><a class="viewcode-back" href="../../../internals/reference/celery.backends.mongodb.html#celery.backends.mongodb.MongoBackend.as_uri">[docs]</a>    <span class="k">def</span> <span class="nf">as_uri</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">include_password</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Return the backend as an URI.</span>

<span class="sd">        :keyword include_password: Censor passwords.</span>

<span class="sd">        &quot;&quot;&quot;</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="p">:</span>
            <span class="k">return</span> <span class="s1">&#39;mongodb://&#39;</span>
        <span class="k">if</span> <span class="n">include_password</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span>

        <span class="k">if</span> <span class="s1">&#39;,&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">maybe_sanitize_url</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>

        <span class="n">uri1</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="s1">&#39;,&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">maybe_sanitize_url</span><span class="p">(</span><span class="n">uri1</span><span class="p">),</span> <span class="n">remainder</span><span class="p">])</span></div></div>
</pre></div>

          </div>
        </div>
      </div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="nav-item nav-item-0"><a href="../../../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="../../index.html" >Module code</a> &raquo;</li>
          <li class="nav-item nav-item-2"><a href="../backends.html" >celery.backends</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &copy; <a href="../../../copyright.html">Copyright</a> 2009-2015, Ask Solem &amp; Contributors.
    </div>
  </body>
</html>
