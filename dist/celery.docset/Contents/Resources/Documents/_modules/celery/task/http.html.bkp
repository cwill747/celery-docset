<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>celery.task.http &mdash; Celery 3.1.23 documentation</title>
    
    <link rel="stylesheet" href="../../../_static/celery.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../../',
        VERSION:     '3.1.23',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../../_static/jquery.js"></script>
    <script type="text/javascript" src="../../../_static/underscore.js"></script>
    <script type="text/javascript" src="../../../_static/doctools.js"></script>
    <link rel="copyright" title="Copyright" href="../../../copyright.html" />
    <link rel="top" title="Celery 3.1.23 documentation" href="../../../index.html" />
    <link rel="up" title="Module code" href="../../index.html" /> 
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="nav-item nav-item-0"><a href="../../../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="../../index.html" accesskey="U">Module code</a> &raquo;</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
<div class="deck">

    
        <p>
        This document describes the current stable version of Celery (3.1). For development docs,
        <a href="http://docs.celeryproject.org/en/master/_modules/celery/task/http.html">go here</a>.
        </p>
    

</div>
    <h1>Source code for celery.task.http</h1><div class="highlight"><pre>
<span></span><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    celery.task.http</span>
<span class="sd">    ~~~~~~~~~~~~~~~~</span>

<span class="sd">    Webhook task implementation.</span>

<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">absolute_import</span>

<span class="kn">import</span> <span class="nn">anyjson</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">parse_qsl</span><span class="p">,</span> <span class="n">urlencode</span><span class="p">,</span> <span class="n">urlparse</span>   <span class="c1"># Py3</span>
<span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>  <span class="c1"># pragma: no cover</span>
    <span class="kn">from</span> <span class="nn">urllib</span> <span class="kn">import</span> <span class="n">urlencode</span>              <span class="c1"># noqa</span>
    <span class="kn">from</span> <span class="nn">urlparse</span> <span class="kn">import</span> <span class="n">urlparse</span><span class="p">,</span> <span class="n">parse_qsl</span>  <span class="c1"># noqa</span>

<span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">shared_task</span><span class="p">,</span> <span class="n">__version__</span> <span class="k">as</span> <span class="n">celery_version</span>
<span class="kn">from</span> <span class="nn">celery.five</span> <span class="kn">import</span> <span class="n">items</span><span class="p">,</span> <span class="n">reraise</span>
<span class="kn">from</span> <span class="nn">celery.utils.log</span> <span class="kn">import</span> <span class="n">get_task_logger</span>

<span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;InvalidResponseError&#39;</span><span class="p">,</span> <span class="s1">&#39;RemoteExecuteError&#39;</span><span class="p">,</span> <span class="s1">&#39;UnknownStatusError&#39;</span><span class="p">,</span>
           <span class="s1">&#39;HttpDispatch&#39;</span><span class="p">,</span> <span class="s1">&#39;dispatch&#39;</span><span class="p">,</span> <span class="s1">&#39;URL&#39;</span><span class="p">]</span>

<span class="n">GET_METHODS</span> <span class="o">=</span> <span class="nb">frozenset</span><span class="p">([</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="s1">&#39;HEAD&#39;</span><span class="p">])</span>
<span class="n">logger</span> <span class="o">=</span> <span class="n">get_task_logger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>


<span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">version_info</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>  <span class="c1"># pragma: no cover</span>

    <span class="kn">from</span> <span class="nn">urllib.request</span> <span class="kn">import</span> <span class="n">Request</span><span class="p">,</span> <span class="n">urlopen</span>

    <span class="k">def</span> <span class="nf">utf8dict</span><span class="p">(</span><span class="n">tup</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">tup</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">return</span> <span class="nb">dict</span><span class="p">(</span><span class="n">tup</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tup</span>

<span class="k">else</span><span class="p">:</span>

    <span class="kn">from</span> <span class="nn">urllib2</span> <span class="kn">import</span> <span class="n">Request</span><span class="p">,</span> <span class="n">urlopen</span>  <span class="c1"># noqa</span>

    <span class="k">def</span> <span class="nf">utf8dict</span><span class="p">(</span><span class="n">tup</span><span class="p">):</span>  <span class="c1"># noqa</span>
        <span class="sd">&quot;&quot;&quot;With a dict&#39;s items() tuple return a new dict with any utf-8</span>
<span class="sd">        keys/values encoded.&quot;&quot;&quot;</span>
        <span class="k">return</span> <span class="nb">dict</span><span class="p">(</span>
            <span class="p">(</span><span class="n">k</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">),</span>
             <span class="n">v</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span> <span class="k">else</span> <span class="n">v</span><span class="p">)</span>  <span class="c1"># noqa</span>
            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">tup</span><span class="p">)</span>


<div class="viewcode-block" id="InvalidResponseError"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.InvalidResponseError">[docs]</a><span class="k">class</span> <span class="nc">InvalidResponseError</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;The remote server gave an invalid response.&quot;&quot;&quot;</span></div>


<div class="viewcode-block" id="RemoteExecuteError"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.RemoteExecuteError">[docs]</a><span class="k">class</span> <span class="nc">RemoteExecuteError</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;The remote task gave a custom error.&quot;&quot;&quot;</span></div>


<div class="viewcode-block" id="UnknownStatusError"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.UnknownStatusError">[docs]</a><span class="k">class</span> <span class="nc">UnknownStatusError</span><span class="p">(</span><span class="n">InvalidResponseError</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;The remote server gave an unknown status.&quot;&quot;&quot;</span></div>


<span class="k">def</span> <span class="nf">extract_response</span><span class="p">(</span><span class="n">raw_response</span><span class="p">,</span> <span class="n">loads</span><span class="o">=</span><span class="n">anyjson</span><span class="o">.</span><span class="n">loads</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Extract the response text from a raw JSON response.&quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">raw_response</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">InvalidResponseError</span><span class="p">(</span><span class="s1">&#39;Empty response&#39;</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">payload</span> <span class="o">=</span> <span class="n">loads</span><span class="p">(</span><span class="n">raw_response</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">ValueError</span> <span class="k">as</span> <span class="n">exc</span><span class="p">:</span>
        <span class="n">reraise</span><span class="p">(</span><span class="n">InvalidResponseError</span><span class="p">,</span> <span class="n">InvalidResponseError</span><span class="p">(</span>
            <span class="nb">str</span><span class="p">(</span><span class="n">exc</span><span class="p">)),</span> <span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">2</span><span class="p">])</span>

    <span class="n">status</span> <span class="o">=</span> <span class="n">payload</span><span class="p">[</span><span class="s1">&#39;status&#39;</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="s1">&#39;success&#39;</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">payload</span><span class="p">[</span><span class="s1">&#39;retval&#39;</span><span class="p">]</span>
    <span class="k">elif</span> <span class="n">status</span> <span class="o">==</span> <span class="s1">&#39;failure&#39;</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">RemoteExecuteError</span><span class="p">(</span><span class="n">payload</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;reason&#39;</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">UnknownStatusError</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">status</span><span class="p">))</span>


<span class="k">class</span> <span class="nc">MutableURL</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Object wrapping a Uniform Resource Locator.</span>

<span class="sd">    Supports editing the query parameter list.</span>
<span class="sd">    You can convert the object back to a string, the query will be</span>
<span class="sd">    properly urlencoded.</span>

<span class="sd">    Examples</span>

<span class="sd">        &gt;&gt;&gt; url = URL(&#39;http://www.google.com:6580/foo/bar?x=3&amp;y=4#foo&#39;)</span>
<span class="sd">        &gt;&gt;&gt; url.query</span>
<span class="sd">        {&#39;x&#39;: &#39;3&#39;, &#39;y&#39;: &#39;4&#39;}</span>
<span class="sd">        &gt;&gt;&gt; str(url)</span>
<span class="sd">        &#39;http://www.google.com:6580/foo/bar?y=4&amp;x=3#foo&#39;</span>
<span class="sd">        &gt;&gt;&gt; url.query[&#39;x&#39;] = 10</span>
<span class="sd">        &gt;&gt;&gt; url.query.update({&#39;George&#39;: &#39;Costanza&#39;})</span>
<span class="sd">        &gt;&gt;&gt; str(url)</span>
<span class="sd">        &#39;http://www.google.com:6580/foo/bar?y=4&amp;x=10&amp;George=Costanza#foo&#39;</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">parts</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">query</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">parse_qsl</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">parts</span><span class="p">[</span><span class="mi">4</span><span class="p">]))</span>

    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">scheme</span><span class="p">,</span> <span class="n">netloc</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="n">fragment</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">parts</span>
        <span class="n">query</span> <span class="o">=</span> <span class="n">urlencode</span><span class="p">(</span><span class="n">utf8dict</span><span class="p">(</span><span class="n">items</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">query</span><span class="p">)))</span>
        <span class="n">components</span> <span class="o">=</span> <span class="p">[</span><span class="n">scheme</span> <span class="o">+</span> <span class="s1">&#39;://&#39;</span><span class="p">,</span> <span class="n">netloc</span><span class="p">,</span> <span class="n">path</span> <span class="ow">or</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;;{0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="k">if</span> <span class="n">params</span> <span class="k">else</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;?{0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">query</span><span class="p">)</span> <span class="k">if</span> <span class="n">query</span> <span class="k">else</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
                      <span class="s1">&#39;#{0}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">fragment</span><span class="p">)</span> <span class="k">if</span> <span class="n">fragment</span> <span class="k">else</span> <span class="s1">&#39;&#39;</span><span class="p">]</span>
        <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">components</span> <span class="k">if</span> <span class="n">c</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s1">&#39;&lt;{0}: {1}&gt;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>


<div class="viewcode-block" id="HttpDispatch"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.HttpDispatch">[docs]</a><span class="k">class</span> <span class="nc">HttpDispatch</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Make task HTTP request and collect the task result.</span>

<span class="sd">    :param url: The URL to request.</span>
<span class="sd">    :param method: HTTP method used. Currently supported methods are `GET`</span>
<span class="sd">        and `POST`.</span>
<span class="sd">    :param task_kwargs: Task keyword arguments.</span>
<span class="sd">    :param logger: Logger used for user/system feedback.</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">user_agent</span> <span class="o">=</span> <span class="s1">&#39;celery/{version}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">version</span><span class="o">=</span><span class="n">celery_version</span><span class="p">)</span>
    <span class="n">timeout</span> <span class="o">=</span> <span class="mi">5</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">task_kwargs</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">method</span> <span class="o">=</span> <span class="n">method</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">task_kwargs</span> <span class="o">=</span> <span class="n">task_kwargs</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">kwargs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;logger&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">logger</span>

<div class="viewcode-block" id="HttpDispatch.make_request"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.HttpDispatch.make_request">[docs]</a>    <span class="k">def</span> <span class="nf">make_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Perform HTTP request and return the response.&quot;&quot;&quot;</span>
        <span class="n">request</span> <span class="o">=</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">items</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">http_headers</span><span class="p">):</span>
            <span class="n">request</span><span class="o">.</span><span class="n">add_header</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">urlopen</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>  <span class="c1"># user catches errors.</span>
        <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="n">read</span><span class="p">()</span></div>

<div class="viewcode-block" id="HttpDispatch.dispatch"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.HttpDispatch.dispatch">[docs]</a>    <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Dispatch callback and return result.&quot;&quot;&quot;</span>
        <span class="n">url</span> <span class="o">=</span> <span class="n">MutableURL</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="p">)</span>
        <span class="n">params</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">method</span> <span class="ow">in</span> <span class="n">GET_METHODS</span><span class="p">:</span>
            <span class="n">url</span><span class="o">.</span><span class="n">query</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">task_kwargs</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">params</span> <span class="o">=</span> <span class="n">urlencode</span><span class="p">(</span><span class="n">utf8dict</span><span class="p">(</span><span class="n">items</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">task_kwargs</span><span class="p">)))</span>
        <span class="n">raw_response</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">make_request</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">url</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">method</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">extract_response</span><span class="p">(</span><span class="n">raw_response</span><span class="p">)</span></div>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">http_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">user_agent</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">headers</span></div>


<span class="nd">@shared_task</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;celery.http_dispatch&#39;</span><span class="p">,</span> <span class="n">bind</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
             <span class="n">url</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">accept_magic_kwargs</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<div class="viewcode-block" id="dispatch"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.dispatch">[docs]</a><span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Task dispatching to an URL.</span>

<span class="sd">    :keyword url: The URL location of the HTTP callback task.</span>
<span class="sd">    :keyword method: Method to use when dispatching the callback. Usually</span>
<span class="sd">        `GET` or `POST`.</span>
<span class="sd">    :keyword \*\*kwargs: Keyword arguments to pass on to the HTTP callback.</span>

<span class="sd">    .. attribute:: url</span>

<span class="sd">        If this is set, this is used as the default URL for requests.</span>
<span class="sd">        Default is to require the user of the task to supply the url as an</span>
<span class="sd">        argument, as this attribute is intended for subclasses.</span>

<span class="sd">    .. attribute:: method</span>

<span class="sd">        If this is set, this is the default method used for requests.</span>
<span class="sd">        Default is to require the user of the task to supply the method as an</span>
<span class="sd">        argument, as this attribute is intended for subclasses.</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">return</span> <span class="n">HttpDispatch</span><span class="p">(</span>
        <span class="n">url</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">url</span><span class="p">,</span> <span class="n">method</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">method</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">,</span>
    <span class="p">)</span><span class="o">.</span><span class="n">dispatch</span><span class="p">()</span></div>


<div class="viewcode-block" id="URL"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.URL">[docs]</a><span class="k">class</span> <span class="nc">URL</span><span class="p">(</span><span class="n">MutableURL</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;HTTP Callback URL</span>

<span class="sd">    Supports requesting an URL asynchronously.</span>

<span class="sd">    :param url: URL to request.</span>
<span class="sd">    :keyword dispatcher: Class used to dispatch the request.</span>
<span class="sd">        By default this is :func:`dispatch`.</span>

<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">dispatcher</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">dispatcher</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">app</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">dispatcher</span> <span class="o">=</span> <span class="n">dispatcher</span> <span class="ow">or</span> <span class="bp">self</span><span class="o">.</span><span class="n">dispatcher</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">dispatcher</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># Get default dispatcher</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">dispatcher</span> <span class="o">=</span> <span class="p">(</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">app</span><span class="o">.</span><span class="n">tasks</span><span class="p">[</span><span class="s1">&#39;celery.http_dispatch&#39;</span><span class="p">]</span> <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">app</span>
                <span class="k">else</span> <span class="n">dispatch</span>
            <span class="p">)</span>

<div class="viewcode-block" id="URL.get_async"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.URL.get_async">[docs]</a>    <span class="k">def</span> <span class="nf">get_async</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">dispatcher</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">),</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span></div>

<div class="viewcode-block" id="URL.post_async"><a class="viewcode-back" href="../../../reference/celery.task.http.html#celery.task.http.URL.post_async">[docs]</a>    <span class="k">def</span> <span class="nf">post_async</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">dispatcher</span><span class="o">.</span><span class="n">delay</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="p">),</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span></div></div>
</pre></div>

          </div>
        </div>
      </div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="nav-item nav-item-0"><a href="../../../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="../../index.html" >Module code</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &copy; <a href="../../../copyright.html">Copyright</a> 2009-2015, Ask Solem &amp; Contributors.
    </div>
  </body>
</html>
