<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>celery.security.serialization &mdash; Celery 3.1.23 documentation</title>
    
    <link rel="stylesheet" href="../../../_static/celery.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../../',
        VERSION:     '3.1.23',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../../_static/jquery.js"></script>
    <script type="text/javascript" src="../../../_static/underscore.js"></script>
    <script type="text/javascript" src="../../../_static/doctools.js"></script>
    <link rel="copyright" title="Copyright" href="../../../copyright.html" />
    <link rel="top" title="Celery 3.1.23 documentation" href="../../../index.html" />
    <link rel="up" title="celery.security" href="../security.html" /> 
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="nav-item nav-item-0"><a href="../../../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="../../index.html" >Module code</a> &raquo;</li>
          <li class="nav-item nav-item-2"><a href="../security.html" accesskey="U">celery.security</a> &raquo;</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
<div class="deck">

    
        <p>
        This document describes the current stable version of Celery (3.1). For development docs,
        <a href="http://docs.celeryproject.org/en/master/_modules/celery/security/serialization.html">go here</a>.
        </p>
    

</div>
    <h1>Source code for celery.security.serialization</h1><div class="highlight"><pre>
<span></span><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="sd">&quot;&quot;&quot;</span>
<span class="sd">    celery.security.serialization</span>
<span class="sd">    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>

<span class="sd">    Secure serializer.</span>

<span class="sd">&quot;&quot;&quot;</span>
<span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">absolute_import</span>

<span class="kn">import</span> <span class="nn">base64</span>

<span class="kn">from</span> <span class="nn">kombu.serialization</span> <span class="kn">import</span> <span class="n">registry</span><span class="p">,</span> <span class="n">dumps</span><span class="p">,</span> <span class="n">loads</span>
<span class="kn">from</span> <span class="nn">kombu.utils.encoding</span> <span class="kn">import</span> <span class="n">bytes_to_str</span><span class="p">,</span> <span class="n">str_to_bytes</span><span class="p">,</span> <span class="n">ensure_bytes</span>

<span class="kn">from</span> <span class="nn">.certificate</span> <span class="kn">import</span> <span class="n">Certificate</span><span class="p">,</span> <span class="n">FSCertStore</span>
<span class="kn">from</span> <span class="nn">.key</span> <span class="kn">import</span> <span class="n">PrivateKey</span>
<span class="kn">from</span> <span class="nn">.utils</span> <span class="kn">import</span> <span class="n">reraise_errors</span>

<span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;SecureSerializer&#39;</span><span class="p">,</span> <span class="s1">&#39;register_auth&#39;</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">b64encode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">bytes_to_str</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">str_to_bytes</span><span class="p">(</span><span class="n">s</span><span class="p">)))</span>


<span class="k">def</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">str_to_bytes</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>


<div class="viewcode-block" id="SecureSerializer"><a class="viewcode-back" href="../../../internals/reference/celery.security.serialization.html#celery.security.serialization.SecureSerializer">[docs]</a><span class="k">class</span> <span class="nc">SecureSerializer</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">cert</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">cert_store</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                 <span class="n">digest</span><span class="o">=</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span> <span class="n">serializer</span><span class="o">=</span><span class="s1">&#39;json&#39;</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_key</span> <span class="o">=</span> <span class="n">key</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_cert</span> <span class="o">=</span> <span class="n">cert</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_cert_store</span> <span class="o">=</span> <span class="n">cert_store</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_digest</span> <span class="o">=</span> <span class="n">digest</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_serializer</span> <span class="o">=</span> <span class="n">serializer</span>

<div class="viewcode-block" id="SecureSerializer.serialize"><a class="viewcode-back" href="../../../internals/reference/celery.security.serialization.html#celery.security.serialization.SecureSerializer.serialize">[docs]</a>    <span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;serialize data structure into string&quot;&quot;&quot;</span>
        <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">_key</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>
        <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cert</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>
        <span class="k">with</span> <span class="n">reraise_errors</span><span class="p">(</span><span class="s1">&#39;Unable to serialize: {0!r}&#39;</span><span class="p">,</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="p">)):</span>
            <span class="n">content_type</span><span class="p">,</span> <span class="n">content_encoding</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">dumps</span><span class="p">(</span>
                <span class="n">bytes_to_str</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">serializer</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_serializer</span><span class="p">)</span>
            <span class="c1"># What we sign is the serialized body, not the body itself.</span>
            <span class="c1"># this way the receiver doesn&#39;t have to decode the contents</span>
            <span class="c1"># to verify the signature (and thus avoiding potential flaws</span>
            <span class="c1"># in the decoding step).</span>
            <span class="n">body</span> <span class="o">=</span> <span class="n">ensure_bytes</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_pack</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">content_type</span><span class="p">,</span> <span class="n">content_encoding</span><span class="p">,</span>
                              <span class="n">signature</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_key</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_digest</span><span class="p">),</span>
                              <span class="n">signer</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_cert</span><span class="o">.</span><span class="n">get_id</span><span class="p">())</span></div>

<div class="viewcode-block" id="SecureSerializer.deserialize"><a class="viewcode-back" href="../../../internals/reference/celery.security.serialization.html#celery.security.serialization.SecureSerializer.deserialize">[docs]</a>    <span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;deserialize data structure from string&quot;&quot;&quot;</span>
        <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cert_store</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>
        <span class="k">with</span> <span class="n">reraise_errors</span><span class="p">(</span><span class="s1">&#39;Unable to deserialize: {0!r}&#39;</span><span class="p">,</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">,</span> <span class="p">)):</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_unpack</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">signature</span><span class="p">,</span> <span class="n">signer</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="p">(</span><span class="n">payload</span><span class="p">[</span><span class="s1">&#39;signature&#39;</span><span class="p">],</span>
                                       <span class="n">payload</span><span class="p">[</span><span class="s1">&#39;signer&#39;</span><span class="p">],</span>
                                       <span class="n">payload</span><span class="p">[</span><span class="s1">&#39;body&#39;</span><span class="p">])</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_cert_store</span><span class="p">[</span><span class="n">signer</span><span class="p">]</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">signature</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_digest</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">loads</span><span class="p">(</span><span class="n">bytes_to_str</span><span class="p">(</span><span class="n">body</span><span class="p">),</span> <span class="n">payload</span><span class="p">[</span><span class="s1">&#39;content_type&#39;</span><span class="p">],</span>
                     <span class="n">payload</span><span class="p">[</span><span class="s1">&#39;content_encoding&#39;</span><span class="p">],</span> <span class="n">force</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></div>

    <span class="k">def</span> <span class="nf">_pack</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">content_type</span><span class="p">,</span> <span class="n">content_encoding</span><span class="p">,</span> <span class="n">signer</span><span class="p">,</span> <span class="n">signature</span><span class="p">,</span>
              <span class="n">sep</span><span class="o">=</span><span class="n">str_to_bytes</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\x00\x01</span><span class="s1">&#39;</span><span class="p">)):</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="n">sep</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>
            <span class="n">ensure_bytes</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="p">[</span><span class="n">signer</span><span class="p">,</span> <span class="n">signature</span><span class="p">,</span> <span class="n">content_type</span><span class="p">,</span>
                                      <span class="n">content_encoding</span><span class="p">,</span> <span class="n">body</span><span class="p">]</span>
        <span class="p">)</span>
        <span class="k">return</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">fields</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_unpack</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="n">str_to_bytes</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\x00\x01</span><span class="s1">&#39;</span><span class="p">)):</span>
        <span class="n">raw_payload</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">ensure_bytes</span><span class="p">(</span><span class="n">payload</span><span class="p">))</span>
        <span class="n">first_sep</span> <span class="o">=</span> <span class="n">raw_payload</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">sep</span><span class="p">)</span>

        <span class="n">signer</span> <span class="o">=</span> <span class="n">raw_payload</span><span class="p">[:</span><span class="n">first_sep</span><span class="p">]</span>
        <span class="n">signer_cert</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_cert_store</span><span class="p">[</span><span class="n">signer</span><span class="p">]</span>

        <span class="n">sig_len</span> <span class="o">=</span> <span class="n">signer_cert</span><span class="o">.</span><span class="n">_cert</span><span class="o">.</span><span class="n">get_pubkey</span><span class="p">()</span><span class="o">.</span><span class="n">bits</span><span class="p">()</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span>
        <span class="n">signature</span> <span class="o">=</span> <span class="n">raw_payload</span><span class="p">[</span>
            <span class="n">first_sep</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">sep</span><span class="p">):</span><span class="n">first_sep</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">sep</span><span class="p">)</span> <span class="o">+</span> <span class="n">sig_len</span>
        <span class="p">]</span>
        <span class="n">end_of_sig</span> <span class="o">=</span> <span class="n">first_sep</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">sep</span><span class="p">)</span> <span class="o">+</span> <span class="n">sig_len</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">sep</span><span class="p">)</span>

        <span class="n">v</span> <span class="o">=</span> <span class="n">raw_payload</span><span class="p">[</span><span class="n">end_of_sig</span><span class="p">:]</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span>
            <span class="s1">&#39;signer&#39;</span><span class="p">:</span> <span class="n">signer</span><span class="p">,</span>
            <span class="s1">&#39;signature&#39;</span><span class="p">:</span> <span class="n">signature</span><span class="p">,</span>
            <span class="s1">&#39;content_type&#39;</span><span class="p">:</span> <span class="n">bytes_to_str</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
            <span class="s1">&#39;content_encoding&#39;</span><span class="p">:</span> <span class="n">bytes_to_str</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
            <span class="s1">&#39;body&#39;</span><span class="p">:</span> <span class="n">bytes_to_str</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span>
        <span class="p">}</span></div>


<div class="viewcode-block" id="register_auth"><a class="viewcode-back" href="../../../internals/reference/celery.security.serialization.html#celery.security.serialization.register_auth">[docs]</a><span class="k">def</span> <span class="nf">register_auth</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">cert</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">store</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">digest</span><span class="o">=</span><span class="s1">&#39;sha1&#39;</span><span class="p">,</span>
                  <span class="n">serializer</span><span class="o">=</span><span class="s1">&#39;json&#39;</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;register security serializer&quot;&quot;&quot;</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">SecureSerializer</span><span class="p">(</span><span class="n">key</span> <span class="ow">and</span> <span class="n">PrivateKey</span><span class="p">(</span><span class="n">key</span><span class="p">),</span>
                         <span class="n">cert</span> <span class="ow">and</span> <span class="n">Certificate</span><span class="p">(</span><span class="n">cert</span><span class="p">),</span>
                         <span class="n">store</span> <span class="ow">and</span> <span class="n">FSCertStore</span><span class="p">(</span><span class="n">store</span><span class="p">),</span>
                         <span class="n">digest</span><span class="o">=</span><span class="n">digest</span><span class="p">,</span> <span class="n">serializer</span><span class="o">=</span><span class="n">serializer</span><span class="p">)</span>
    <span class="n">registry</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="s1">&#39;auth&#39;</span><span class="p">,</span> <span class="n">s</span><span class="o">.</span><span class="n">serialize</span><span class="p">,</span> <span class="n">s</span><span class="o">.</span><span class="n">deserialize</span><span class="p">,</span>
                      <span class="n">content_type</span><span class="o">=</span><span class="s1">&#39;application/data&#39;</span><span class="p">,</span>
                      <span class="n">content_encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span></div>
</pre></div>

          </div>
        </div>
      </div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="nav-item nav-item-0"><a href="../../../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="../../index.html" >Module code</a> &raquo;</li>
          <li class="nav-item nav-item-2"><a href="../security.html" >celery.security</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &copy; <a href="../../../copyright.html">Copyright</a> 2009-2015, Ask Solem &amp; Contributors.
    </div>
  </body>
</html>
