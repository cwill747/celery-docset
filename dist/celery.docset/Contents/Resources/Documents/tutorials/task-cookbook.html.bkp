<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Task Cookbook &mdash; Celery 3.1.23 documentation</title>
    
    <link rel="stylesheet" href="../_static/celery.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../',
        VERSION:     '3.1.23',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../_static/jquery.js"></script>
    <script type="text/javascript" src="../_static/underscore.js"></script>
    <script type="text/javascript" src="../_static/doctools.js"></script>
    <link rel="copyright" title="Copyright" href="../copyright.html" />
    <link rel="top" title="Celery 3.1.23 documentation" href="../index.html" />
    <link rel="up" title="Tutorials" href="index.html" />
    <link rel="next" title="Frequently Asked Questions" href="../faq.html" />
    <link rel="prev" title="Debugging Tasks Remotely (using pdb)" href="debugging.html" /> 
  </head>
  <body role="document">
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="../faq.html" title="Frequently Asked Questions"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="debugging.html" title="Debugging Tasks Remotely (using pdb)"
             accesskey="P">previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="index.html" accesskey="U">Tutorials</a> &raquo;</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
<div class="deck">

    
        <p>
        This document describes the current stable version of Celery (3.1). For development docs,
        <a href="http://docs.celeryproject.org/en/master/tutorials/task-cookbook.html">go here</a>.
        </p>
    

</div>
    <div class="section" id="task-cookbook">
<span id="cookbook-tasks"></span><h1>Task Cookbook<a class="headerlink" href="#task-cookbook" title="Permalink to this headline">¶</a></h1>
<div class="contents local topic" id="contents">
<ul class="simple">
<li><a class="reference internal" href="#ensuring-a-task-is-only-executed-one-at-a-time" id="id1">Ensuring a task is only executed one at a time</a></li>
</ul>
</div>
<div class="section" id="ensuring-a-task-is-only-executed-one-at-a-time">
<span id="cookbook-task-serial"></span><h2><a class="toc-backref" href="#id1">Ensuring a task is only executed one at a time</a><a class="headerlink" href="#ensuring-a-task-is-only-executed-one-at-a-time" title="Permalink to this headline">¶</a></h2>
<p>You can accomplish this by using a lock.</p>
<p>In this example we&#8217;ll be using the cache framework to set a lock that is
accessible for all workers.</p>
<p>It&#8217;s part of an imaginary RSS feed importer called <cite>djangofeeds</cite>.
The task takes a feed URL as a single argument, and imports that feed into
a Django model called <cite>Feed</cite>. We ensure that it&#8217;s not possible for two or
more workers to import the same feed at the same time by setting a cache key
consisting of the MD5 checksum of the feed URL.</p>
<p>The cache key expires after some time in case something unexpected happens
(you never know, right?)</p>
<div class="highlight-python"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">task</span>
<span class="kn">from</span> <span class="nn">celery.utils.log</span> <span class="kn">import</span> <span class="n">get_task_logger</span>
<span class="kn">from</span> <span class="nn">django.core.cache</span> <span class="kn">import</span> <span class="n">cache</span>
<span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>
<span class="kn">from</span> <span class="nn">djangofeeds.models</span> <span class="kn">import</span> <span class="n">Feed</span>

<span class="n">logger</span> <span class="o">=</span> <span class="n">get_task_logger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="n">LOCK_EXPIRE</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">5</span> <span class="c1"># Lock expires in 5 minutes</span>

<span class="nd">@task</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">import_feed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">feed_url</span><span class="p">):</span>
    <span class="c1"># The cache key consists of the task name and the MD5 digest</span>
    <span class="c1"># of the feed URL.</span>
    <span class="n">feed_url_hexdigest</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">feed_url</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
    <span class="n">lock_id</span> <span class="o">=</span> <span class="s1">&#39;{0}-lock-{1}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">feed_url_hexdigest</span><span class="p">)</span>

    <span class="c1"># cache.add fails if the key already exists</span>
    <span class="n">acquire_lock</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">cache</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">lock_id</span><span class="p">,</span> <span class="s1">&#39;true&#39;</span><span class="p">,</span> <span class="n">LOCK_EXPIRE</span><span class="p">)</span>
    <span class="c1"># memcache delete is very slow, but we have to use it to take</span>
    <span class="c1"># advantage of using add() for atomic locking</span>
    <span class="n">release_lock</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">cache</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">lock_id</span><span class="p">)</span>

    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s1">&#39;Importing feed: </span><span class="si">%s</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">feed_url</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">acquire_lock</span><span class="p">():</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">feed</span> <span class="o">=</span> <span class="n">Feed</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">import_feed</span><span class="p">(</span><span class="n">feed_url</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">release_lock</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">feed</span><span class="o">.</span><span class="n">url</span>

    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span>
        <span class="s1">&#39;Feed </span><span class="si">%s</span><span class="s1"> is already being imported by another worker&#39;</span><span class="p">,</span> <span class="n">feed_url</span><span class="p">)</span>
</pre></div>
</div>
</div>
</div>


          </div>
        </div>
      </div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="../py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="../faq.html" title="Frequently Asked Questions"
             >next</a> |</li>
        <li class="right" >
          <a href="debugging.html" title="Debugging Tasks Remotely (using pdb)"
             >previous</a> |</li>
        <li class="nav-item nav-item-0"><a href="../index.html">Celery 3.1.23 documentation</a> &raquo;</li>
          <li class="nav-item nav-item-1"><a href="index.html" >Tutorials</a> &raquo;</li> 
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &copy; <a href="../copyright.html">Copyright</a> 2009-2015, Ask Solem &amp; Contributors.
    </div>
  </body>
</html>
